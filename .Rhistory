qplot(week,up,date=d)
qplot(week,up,data=d)
ggplot(d,aes(week,up)) + geom_point()
p = ggplot(d_r,aes(week,value)) + geom_point() + facet_grid(variable~.)
p
p + scale_y_datetime(date_labels='%h%m')
p = ggplot(d_r,aes(week,value)) + geom_point() + facet_grid(variable~.)
p
p + scale_y_datetime(date_labels='%H%M')
p + scale_y_datetime(date_labels='%H:%M')
p
qplot(week,up,date=d)
qplot(week,up,data=d)
ggplot(d,aes(week,up)) + geom_point()
p = ggplot(d_r,aes(week,value)) + geom_point() + facet_grid(variable~.)
p
p = ggplot(d_r,aes(week,value)) + geom_point() + facet_grid(variable~.,scales = "free")
p
d = read.table('./data/gf.txt',sep=',',header = TRUE,encoding='UTF-8')
p + scale_y_datetime(date_labels='%H:%M')
d_r
qplot(d$value)
qplot(week,value)
qplot(week,value,data=d_r)
p = ggplot(d_r,aes(week,value)) + geom_point() + facet_grid(variable~.,scales = "free")
p
p + scale_y_datetime(date_labels='%H:%M')
ggplot(d,aes(week,up)) + geom_point() + geom_line()
p = ggplot(d_r,aes(week,value)) + geom_point() + geom_line() + facet_grid(variable~.,scales = "free")
p
p + scale_y_datetime(date_labels='%H:%M')
?geom_point
p = ggplot(d_r,aes(week,value)) + geom_point(size=3) + geom_line() + facet_grid(variable~.,scales = "free")
p
p + scale_y_datetime(date_labels='%H:%M')
p + scale_y_datetime(date_labels='%H:%M',date_breaks='10 minutes')
p + scale_y_datetime(date_labels='%H:%M',date_breaks ='10 minute')
p + scale_y_datetime(date_labels='%H:%M',minor_breaks = date_breaks("2 hour"))
p
p + scale_y_datetime(date_labels='%H:%M',breaks = date_breaks("30 min"), minor_breaks=date_breaks("15 min"))
?scale_y_datetime
p + scale_y_datetime(date_labels='%H:%M',breaks = "30 min")
p + scale_y_datetime(date_labels='%H:%M',date_breaks = "30 min")
p + scale_y_datetime(date_labels='%H:%M',date_breaks = "10 min")
p + scale_y_datetime(date_labels='%H:%M',date_breaks = "15 min")
d_r
d
d$down
d = read.table('./data/gf.txt',sep=',',header = TRUE,encoding='UTF-8')
d$up = parse_date_time(d$up,orders='hm')
d$work = parse_date_time(d$work,orders='hm')
d$down = parse_date_time(d$down,orders='hm')
d$date = parse_date_time(d$date,orders='ymd')
start_date = '2016-08-29 00:00'
end_date = '2016-09-04 24:00'
flag1 = d$date >= start_date
flag2 = d$date <=  end_date
d = subset(d, flag1 & flag2  )
d['week'] = 1:7
# 画图
d_r = melt(d,id=c('date','week'))
class(d_r$value)
d
d$down
d$down[7]
d$down[7] - day(1)
d$down[7] - days(1)
d$down[7] = d$down[7] - days(1)
d
d_r = melt(d,id=c('date','week'))
p = ggplot(d_r,aes(week,value)) + geom_point(size=3) + geom_line() + facet_grid(variable~.,scales = "free")
p
p + scale_y_datetime(date_labels='%H:%M',date_breaks = "15 min")
p + scale_y_datetime(date_labels='%H:%M',date_breaks="30 min",  date_minor_breaks="15 min")
d_r
d
d = read.table('./data/gf.txt',sep=',',header = TRUE,encoding='UTF-8')
d
---
title: "Untitled"
output: html_document
---
```{r,echo=FALSE}
#载入库
library("lubridate")
library("ggplot2")
library("reshape")
# 载入数据
d = read.table('../data/gf.txt',sep=',',header = TRUE,encoding='UTF-8')
d$date = parse_date_time(d$date,orders='ymd')
```
基本的统计信息如下：
```{r}
knitr::kable(d)
```
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
d
d = read.table('../data/gf.txt',sep=',',header = TRUE,encoding='UTF-8')
d$date = parse_date_time(d$date,orders='ymd')
start_date = '2016-08-29 00:00'
end_date = '2016-09-04 24:00'
flag1 = d$date >= start_date
flag2 = d$date <=  end_date
d = subset(d, flag1 & flag2  )
d = read.table('./data/gf.txt',sep=',',header = TRUE,encoding='UTF-8')
d$date = parse_date_time(d$date,orders='ymd')
start_date = '2016-08-29 00:00'
end_date = '2016-09-04 24:00'
flag1 = d$date >= start_date
flag2 = d$date <=  end_date
d = subset(d, flag1 & flag2  )
d
is.nan(d$work)
d$work
length(d$work)
d$work[6]
is.null(d$work)
is.null(d$work[6])
d = read.table('./data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d = read.table('../data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d$date = parse_date_time(d$date,orders='ymd')
start_date = '2016-08-29 00:00'
end_date = '2016-09-04 24:00'
flag1 = d$date >= start_date
flag2 = d$date <=  end_date
d = subset(d, flag1 & flag2  )
D
d
d$wo`
d$wo`
d$work
is.nan(d$work)
is.null(d$work)
is.null(d$work[5])
is.null(d$work[6])
is.null(d$work[7])
d$work==''
d$work!=''
sum(d$work!='')
d$up = parse_date_time(d$up,orders='hm')
d$work = parse_date_time(d$work,orders='hm')
d$down = parse_date_time(d$down,orders='hm')
d
d$down[7] = d$down[7] - days(1)
d
mean(d$up)
mean(d$work)
?mean
mean(d$work,na.rm=TRUE)
print(mean(d$work,na.rm=TRUE))
class(d$work)
source('~/.active-rstudio-document', echo=TRUE)
foo
t.lub <- ymd_hms(foo$start.time)
t.lub
h.str <- as.numeric(format(t.str, "%H")) +
as.numeric(format(t.str, "%M"))/60
h.lub <- hour(t.lub) + minute(t.lub)/60
h.lub
as.numeric(foo$start.time - trunc(foo$start.time, "days"))
?trunc
as.numeric(d$work - trunc(d$work, "days"))
d = read.table('./data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d$up = parse_date_time(paste(d$date,d$up),orders='ymd hm')
d$work = parse_date_time(paste(d$date,d$work),orders='ymd hm')
d$down = parse_date_time(paste(d$date,d$down),orders='ymd hm')
d$date = parse_date_time(d$date,orders='ymd')
d
dd  = as.numeric(d$work - trunc(d$work,'days'))
dd
qplot(dd) + scale_x_datetime(format='%S:00')
?scale_x_datetime
qplot(dd) + scale_x_datetime(labels = date_format("%S:00"))
qplot(dd) + scale_x_datetime(labels = "%S:00")
dd
class(dd)
class(dd) <- "POSIXct"
qplot(dd) + scale_x_datetime(labels = "%S:00")
qplot(dd) + scale_x_datetime(labels = date_format("%S:00"))
library('scales')
qplot(dd) + scale_x_datetime(labels = date_format("%S:00"))
qplot(dd) + scale_x_datetime(labels = date_format("%S:00"),date_breaks="30 min",  date_minor_breaks="15 min")
qplot(dd) + scale_x_datetime(date_breaks="30 min",  date_minor_breaks="15 min", labels = date_format("%S:00"))
qplot(dd) + scale_x_datetime(labels = date_format("%S:00"))
d = read.table('./data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d$date = parse_date_time(d$date,orders='ymd')
start_date = '2016-08-29 00:00'
end_date = '2016-09-04 24:00'
flag1 = d$date >= start_date
flag2 = d$date <=  end_date
d = subset(d, flag1 & flag2  )
# 特殊处理
d$up = parse_date_time(d$up,orders='hm')
d$work = parse_date_time(d$work,orders='hm')
d$down = parse_date_time(d$down,orders='hm')
d$down[7] = d$down[7] - days(1)
d
sapply(d, min)
sapply
?sapply
sapply(d, min,na.rm=TRUE)
D
d
min(d$up)
min(d$work)
min(d$work,na.rm=TRUE)
sapply(d, min,na.rm=TRUE)
X = sapply(d, min,na.rm=TRUE)
X[2]
class(X[2])
as.Date(X[2])
min(d$up,na.rm=TRUE)
x = min(d$up,na.rm=TRUE)
？format
?format
format(x,'%H')
format(x,'%H %M')
format(x,'%H:%M')
x = format(min(d$up,na.rm=TRUE),'%H:%M')
x
mins = c(format(min(d$up,na.rm=TRUE),'%H:%M'),format(min(d$work,na.rm=TRUE),'%H:%M'),format(min(d$down,na.rm=TRUE),'%H:%M'))
mins
mins = c(format(min(d$up,na.rm=TRUE),'%H:%M'),format(min(d$work,na.rm=TRUE),'%H:%M'),format(min(d$down,na.rm=TRUE),'%H:%M'))
maxs = c(format(max(d$up,na.rm=TRUE),'%H:%M'),format(max(d$work,na.rm=TRUE),'%H:%M'),format(max(d$down,na.rm=TRUE),'%H:%M'))
means = c(format(mean(d$up,na.rm=TRUE),'%H:%M'),format(mean(d$work,na.rm=TRUE),'%H:%M'),format(mean(d$down,na.rm=TRUE),'%H:%M'))
data.frame(mins,maxs,means)
row.names(d_sumarize) = c('起床','下班','睡觉')
d_sumarize = data.frame(mins,maxs,means)
colnames(d_sumarize) = c('最早','最晚','平均')
row.names(d_sumarize) = c('起床','下班','睡觉')
d_sumarize
d = read.table('./data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d$date = parse_date_time(d$date,orders='ymd')
start_date = '2016-08-29 00:00'
end_date = '2016-09-04 24:00'
flag1 = d$date >= start_date
flag2 = d$date <=  end_date
d = subset(d, flag1 & flag2  )
# 特殊处理
d$up = parse_date_time(d$up,orders='hm')
d$work = parse_date_time(d$work,orders='hm')
d$down = parse_date_time(d$down,orders='hm')
d$down[7] = d$down[7] - days(1)
mins = c(format(min(d$up,na.rm=TRUE),'%H:%M'),format(min(d$work,na.rm=TRUE),'%H:%M'),format(min(d$down,na.rm=TRUE),'%H:%M'))
maxs = c(format(max(d$up,na.rm=TRUE),'%H:%M'),format(max(d$work,na.rm=TRUE),'%H:%M'),format(max(d$down,na.rm=TRUE),'%H:%M'))
means = c(format(mean(d$up,na.rm=TRUE),'%H:%M'),format(mean(d$work,na.rm=TRUE),'%H:%M'),format(mean(d$down,na.rm=TRUE),'%H:%M'))
d_sumarize = data.frame(mins,maxs,means)
colnames(d_sumarize) = c('最早','最晚','平均')
row.names(d_sumarize) = c('起床','下班','睡觉')
knitr::kable(d_sumarize)
d = read.table('./data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d$date = parse_date_time(d$date,orders='ymd')
start_date = '2016-08-29 00:00'
end_date = '2016-09-04 24:00'
flag1 = d$date >= start_date
flag2 = d$date <=  end_date
d = subset(d, flag1 & flag2  )
# 特殊处理
d$up = parse_date_time(d$up,orders='hm')
d$work = parse_date_time(d$work,orders='hm')
d$down = parse_date_time(d$down,orders='hm')
d$down[7] = d$down[7] - days(1)
d$work
is.nan(d$work)
is.na(d$work)
sum(is.na(d$work))
# CHUNK 1
library(sand)
data(karate)
hist(degree(karate), col="lightblue", xlim=c(0,50),
xlab="Vertex Degree", ylab="Frequency", main="")
# CHUNK 2
hist(graph.strength(karate), col="pink",
xlab="Vertex Strength", ylab="Frequency", main="")
# CHUNK 3
library(igraphdata)
data(yeast)
# CHUNK 4
ecount(yeast)
# ---
## [1] 11855
# ---
# CHUNK 5
vcount(yeast)
# ---
## [1] 2617
# ---
# CHUNK 6
d.yeast <- degree(yeast)
hist(d.yeast,col="blue",
xlab="Degree", ylab="Frequency",
main="Degree Distribution")
# CHUNK 7
dd.yeast <- degree.distribution(yeast)
d <- 1:max(d.yeast)-1
ind <- (dd.yeast != 0)
plot(d[ind], dd.yeast[ind], log="xy", col="blue",
xlab=c("Log-Degree"), ylab=c("Log-Intensity"),
main="Log-Log Degree Distribution")
# CHUNK 8
a.nn.deg.yeast <- graph.knn(yeast,V(yeast))$knn
plot(d.yeast, a.nn.deg.yeast, log="xy",
col="goldenrod", xlab=c("Log Vertex Degree"),
ylab=c("Log Average Neighbor Degree"))
# CHUNK 9
A <- get.adjacency(karate, sparse=FALSE)
library(network)
g <- network::as.network.matrix(A)
library(sna)
sna::gplot.target(g, degree(g), main="Degree",
circ.lab = FALSE, circ.col="skyblue",
usearrows = FALSE,
vertex.col=c("blue", rep("red", 32), "yellow"),
edge.col="darkgray")
# CHUNK 10
l <- layout.kamada.kawai(aidsblog)
plot(aidsblog, layout=l, main="Hubs", vertex.label="",
vertex.size=10 * sqrt(hub.score(aidsblog)$vector))
plot(aidsblog, layout=l, main="Authorities",
vertex.label="", vertex.size=10 *
sqrt(authority.score(aidsblog)$vector))
# CHUNK 11
eb <- edge.betweenness(karate)
E(karate)[order(eb, decreasing=T)[1:3]]
# ---
## Edge sequence:
##
## [53] John A   -- Actor 20
## [14] Actor 20 -- Mr Hi
## [16] Actor 32 -- Mr Hi
# ---
# CHUNK 12
table(sapply(cliques(karate), length))
# ---
##
##  1  2  3  4  5
## 34 78 45 11  2
# ---
# CHUNK 13
cliques(karate)[sapply(cliques(karate), length) == 5]
# ---
## [[1]]
## [1] 1 2 3 4 8
##
## [[2]]
## [1]  1  2  3  4 14
# ---
# CHUNK 14
table(sapply(maximal.cliques(karate), length))
# ---
##
##  2  3  4  5
## 11 21  2  2
# ---
# CHUNK 15
clique.number(yeast)
# ---
## [1] 23
# ---
# CHUNK 16
cores <- graph.coreness(karate)
sna::gplot.target(g, cores, circ.lab = FALSE,
circ.col="skyblue", usearrows = FALSE,
vertex.col=cores, edge.col="darkgray")
detach("package:network")
detach("package:sna")
# CHUNK 17
aidsblog <- simplify(aidsblog)
dyad.census(aidsblog)
# ---
## $mut
## [1] 3
##
## $asym
## [1] 177
##
## $null
## [1] 10405
# ---
# CHUNK 18
ego.instr <- induced.subgraph(karate,
neighborhood(karate, 1, 1)[[1]])
ego.admin <- induced.subgraph(karate,
neighborhood(karate, 1, 34)[[1]])
graph.density(karate)
# ---
## [1] 0.1390374
# ---
graph.density(ego.instr)
# ---
## [1] 0.25
# ---
graph.density(ego.admin)
# ---
## [1] 0.2091503
# ---
library(sand)
set.seed(42)
g.er <- erdos.renyi.game(100, 0.02)
plot(g.er, layout=layout.circle, vertex.label=NA)
is.connected(g.er)
table(sapply(decompose.graph(g.er), vcount))
71+15+4+6+4
?decompose.graph
# CHUNK 5
hist(degree(g.er), col="lightblue",
xlab="Degree", ylab="Frequency", main="")
?average.path.length
？diameter
?diameter
distances(g.er)
max(distances(g.er))
max(distances(g.er),na.rm=TRUE)
max(distances(g.er),na.rm=TRUE)
distances(g.er)==14
SUM(distances(g.er)==14)
sum(distances(g.er)==14)
sum(distances(g.er)==15)
length(distances(g.er))
?transitivity
# CHUNK 14
g.ws <- watts.strogatz.game(1, 25, 5, 0.05)
plot(g.ws, layout=layout.circle, vertex.label=NA)
transitivity(g.ws)
# CHUNK 15
g.lat100 <- watts.strogatz.game(1, 100, 5, 0)
transitivity(g.lat100)
diameter(g.lat100)
diameter(g.ws)
?diameter
plot(g.lat100, layout=layout.circle, vertex.label=NA)
set.seed(42)
g.ba <- barabasi.game(100, directed=FALSE)
plot(g.ba, layout=layout.circle, vertex.label=NA)
hist(degree(g.ba), col="lightblue",
xlab="Degree", ylab="Frequency", main="")
# CHUNK 23
summary(degree(g.ba))
data(karate)
nv <- vcount(karate)
ne <- ecount(karate)
degs <- degree(karate)
nv
ne
degs
ntrials <- 1000
num.comm.rg <- numeric(ntrials)
for(i in (1:ntrials)){
g.rg <- erdos.renyi.game(nv, ne, type="gnm")
c.rg <- fastgreedy.community(g.rg)
num.comm.rg[i] <- length(c.rg)
}
?fastgreedy.community
num.comm.grg <- numeric(ntrials)
for(i in (1:ntrials)){
g.grg <- degree.sequence.game(degs, method="vl")
c.grg <- fastgreedy.community(g.grg)
num.comm.grg[i] <- length(c.grg)
}
# CHUNK 30
rslts <- c(num.comm.rg,num.comm.grg)
indx <- c(rep(0, ntrials), rep(1, ntrials))
counts <- table(indx, rslts)/ntrials
barplot(counts, beside=TRUE, col=c("blue", "red"),
xlab="Number of Communities",
ylab="Relative Frequency",
legend=c("Fixed Size", "Fixed Degree Sequence"))
library(igraphdata)
data(macaque)
summary(macaque)
library(igraphdata)
data(macaque)
summary(macaque)
# CHUNK 32
clust.coef.dir <- function(graph) {
A <- as.matrix(get.adjacency(graph))
S <- A + t(A)
deg <- degree(graph, mode=c("total"))
num <- diag(S %*% S %*% S)
denom <- diag(A %*% A)
denom <- 2 * (deg * (deg - 1) - 2 * denom)
cl <- mean(num/denom)
return(cl)
}
# CHUNK 33
ntrials <- 1000
nv <- vcount(macaque)
ne <- ecount(macaque)
cl.rg <- numeric(ntrials)
apl.rg <- numeric(ntrials)
for (i in (1:ntrials)) {
g.rg <- erdos.renyi.game(nv, ne, type="gnm",
directed=TRUE)
cl.rg[i] <- clust.coef.dir(g.rg)
apl.rg[i] <- average.path.length(g.rg)
}
summary(cl.rg)
summary(apl.rg)
clust.coef.dir(macaque)
average.path.length(macaque)
hist(cl.rg)
hist(apl.rg)
setwd("~/GitHub/innovdiffuse")
