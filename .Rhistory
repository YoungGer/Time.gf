x$p
V(g)[1]
V(g)[1]$p
V(g)[1]$p=3
V(g)[1]$p
V(g)[1,2]$p
V(g)[1,2,3]$p
V(g)[1,2,3]$p = 3
V(g)[1,2]$p = 3
V(g)[1,2]$p
V(g)[[1,2]]$p
V(g)[1,2]$p
V(g)[1,2]$p = c(3,3)
V(g)[1,2]
V(g)[1,2]$p
V(g)[1,2]$p = [3,3]
V(g)[1,2]$p
V(g)[1,2]$p = c(3,3)
?V
V(g)[1,2]
V(g)[1,2]$p
V(g)[1,2]$p = 3
vertex_attr(g,p,V(g)[1,2]) = 3
V(g)[1,2]$p
vertex_attr(g,p,V(g)) = 3
V(g)[1,2]$p
V(g)$p
vertex_attr(g,p,V(g)) <- 3
V(g)$p
set_vertex_attr(g,p,V(g),3)
V(g)$p
g = set_vertex_attr(g,p,V(g),3)
V(g)$p
g2 = set_vertex_attr(g,p,V(g),3)
g2
V(g2)$p
V(g)
V(g)$q
V(g)[1,2]$q
V(g)[1,2]$q = 3
V(g)[1,2]$q = c(3,3)
(V(g)[1,2])$q = c(3,3)
V(g)[1,2]$q <- c(3,3)
V(g)[1,2]$q <- 3
V(g)[c(1,2)]$q <- 3
V(g)$q
V(g)[c(4,5)]$q <- 5
V(g)$q
V(g)$p = p
V(g)$q = q
V(g)$adopted = FALSE
Vg[p==3]
V(g)[p==3]
V(g)[p==0.3]
V(g)[adopted==FALSE]
x = V(g)[adopted==FALSE]
x$p
x$p = 1
V(g)$p
V(g)[adopted==FALSE]
x = V(g)[1]
x
v1 = V(g)[1]
v1$p
v1$q
v1$adopted
x1 = runif()
x1 = runif(2)
x1
x1,x2 = runif(2)
x1 = runif(1)
runif?
dsa
a
d
?runif
x1 = runif(1)
x2 = runif(1)
x1
x2
neighbors(g,1)
length(neighbors(g,1) )
neighbors(g,1)$adopted
sum(neighbors(g,1)$adopted)
sum(c(TRUE,FALSE))
flag1 = x1<v1$p
flag2 = x2<v1$q * sum(neighbors(g,1)$adopted) / length(neighbors(g,1))
flag1
flag2
x1 = runif(1)
x1
flag1 = x1<v1$p
flag2 = x2<v1$q * sum(neighbors(g,1)$adopted) / length(neighbors(g,1))
flag1
if (flag1 | flag2) {
V(g)[1]$adopted = TRUE
}
V(g)$adopted
V(g)[adopted==FALSE]
V(g)[adopted==FALSE][1]
V(g)[adopted==FALSE][1]==2
V(g)[adopted==FALSE][1]-1
V(g)[adopted==FALSE][1]-9
V(g)[adopted==FALSE][1]-1
V(g)[adopted==FALSE][1]
V(g)[V(g)[adopted==FALSE][1]-1]
V(g)[V(g)[adopted==FALSE][1]-1]$adopted
?neighbors
1:10
sum(neighbors(g,i)$adopted
)
V(g)$adopted
sum(V(g)$adopted)
x1 = c()
x1
x1 = c(x1,2)
x1
x1 = c(x1,3)
x1
g <- erdos.renyi.game(m, 0.1)
# vertices parameters initialization
V(g)$p = p
V(g)$q = q
V(g)$adopted = FALSE
nums_adopted = c()
for (i_iter in 1:10) {
#
nums_adopted = c(nums_adopted, sum(V(g)$adopted))
for (i in V(g)[adopted==FALSE]) {
x1 = runif(1)
x2 = runif(1)
flag1 = x1 < V(g)[i]$p
flag2 = x2 < V(g)[i]$q * sum(neighbors(g,i)$adopted) / length(neighbors(g,i))
if (flag1 | flag2) {
V(g)[i]$adopted = TRUE
}
}
}
plot(nums_adopted)
setwd("~/GitHub/innovdiffuse")
print('aa')
#' Generate ABM Network
#' @param m vertices number.
#' @param p probability of adopting due to mass media.
#' @param q probability of adopting due to word-of-mouth effects.
#' @param connect_p network density, the percentage of all agents that each agent is connected to, using in random network.
#' @param type network type.
#' @return \code{g} gragh model.
#' @examples
#' ## Set mysql and sql_setting first, then load data.
#' sql_setting = list(
#' "databaseName" = "myshinydatabase",
#' "table" = "survey2",
#' "host" = "mydbinstance.cborivvt2d54.us-east-1.rds.amazonaws.com",
#' "port" = 3306,
#' "user" = "guangzhixingno1",
#' "password" = "guangyao")
#' library(RMySQL)
#' mysql = MySQL()
#' data <- load_MySQL_data(mysql,sql_setting)
#' print (head(data))
#' @export
abm_network <- function(m, p, q, connect_p, type='random') {
if (type='random') {
# build gragh
g <- igraph::erdos.renyi.game(m, connect_p)
# set gragh parameter
V(g)$p = p
V(g)$q = q
V(g)$adopted = FALSE
return(g)
} else {
print('No such type')
}
}
abm_network <- function(m, p, q, connect_p, type='random') {
if (type='random') {
# build gragh
g <- igraph::erdos.renyi.game(m, connect_p)
# set gragh parameter
V(g)$p = p
V(g)$q = q
V(g)$adopted = FALSE
return(g)
} else {
print('No such type')
}
}
abm_network <- function(m, p, q, connect_p, type='random') {
if (type=='random') {
# build gragh
g <- igraph::erdos.renyi.game(m, connect_p)
# set gragh parameter
V(g)$p <- p
V(g)$q <- q
V(g)$adopted <- FALSE
return(g)
} else {
print('No such type')
}
}
m = 100
p = 0.3
q = 0.3
connect_p = 0.05
g = abm_network(m, p, q, connect_p, type='random')
plot(g)
print('1','2')
print('1'+'2')
print(c('1','2'))
print('1','2')
print?
ad
?print
cat('1','2')
cat('Vertices Sum',vcount(g))
cat('Vertices Number:',vcount(g))
cat('Vertices Attributes p:',g$p)
cat('Vertices Attributes p:',g$q)
g <- igraph::erdos.renyi.game(m, connect_p)
list.vertex.attributes(g)
g$p
g$q
g$p
plot(g)
g$p = 11
g$p
abm_network <- function(m, p, q, connect_p, type='random') {
if (type=='random') {
# build gragh
g <- igraph::erdos.renyi.game(m, connect_p)
# set gragh parameter
g$p <- p
g$q <- q
V(g)$adopted <- FALSE
return(g)
} else {
print('No such type')
}
}
g = abm_network(m, p, q, connect_p, type='random')
g = abm_network(m, p, q, connect_p, type='random')
g = abm_network(m, p, q, connect_p, type='random')
plot(g)
cat('Vertices Number:',vcount(g))
cat('Vertices Attributes p:',g$p)
cat('Vertices Attributes q:',g$q)
cat('Vertices Not-adopted Number:',sum(V(g)$adopted==FALSE))
devtools::document()
library(devtools)
devtools::document()
d = read.table('../data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d$date = parse_date_time(d$date,orders='ymd')
start_date = parse_date_time('2016-09-12 00:00',orders='ymdHM')
end_date = parse_date_time('2016-09-18 23:59',orders='ymdHM')
flag1 = d$date >= start_date
flag2 = d$date <=  end_date
d = subset(d, flag1 & flag2  )
d['week'] = 1:7
d = d[c('date','week','up','work','down')]
# 特殊处理
d$up = parse_date_time(d$up,orders='hm')
d$work = parse_date_time(d$work,orders='hm')
d$down = parse_date_time(d$down,orders='hm')
library("lubridate")
library("ggplot2")
library("reshape")
# 载入数据
d = read.table('../data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d$date = parse_date_time(d$date,orders='ymd')
setwd("E:/Github/Time.gf/test")
library("lubridate")
library("ggplot2")
library("reshape")
# 载入数据
d = read.table('../data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d$date = parse_date_time(d$date,orders='ymd')
start_date = parse_date_time('2016-09-12 00:00',orders='ymdHM')
end_date = parse_date_time('2016-09-18 23:59',orders='ymdHM')
flag1 = d$date >= start_date
flag2 = d$date <=  end_date
d = subset(d, flag1 & flag2  )
d['week'] = 1:7
d = d[c('date','week','up','work','down')]
# 特殊处理
d$up = parse_date_time(d$up,orders='hm')
d$work = parse_date_time(d$work,orders='hm')
d$down = parse_date_time(d$down,orders='hm')
d
library("lubridate")
library("ggplot2")
library("reshape")
# 载入数据
d = read.table('../data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d$date = parse_date_time(d$date,orders='ymd')
setwd("E:/Github/Time.gf/test")
setwd("E:/Github/Time.gf")
setwd("E:/Github/Time.gf")
setwd("E:/Github/Time.gf")
d = read.table('../data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d = read.table('./data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d$date = parse_date_time(d$date,orders='ymd')
start_date = parse_date_time('2016-09-19 00:00',orders='ymdHM')
end_date = parse_date_time('2016-09-25 23:59',orders='ymdHM')
flag1 = d$date >= start_date
flag2 = d$date <=  end_date
d = subset(d, flag1 & flag2  )
d['week'] = 1:7
d = d[c('date','week','up','work','down')]
d
library("lubridate")
library("ggplot2")
library("reshape")
# 载入数据
d = read.table('../data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d = read.table('../data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
library(Time.gf)
d = read.table(' ../data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d$date = parse_date_time(d$date,orders='ymd')
d = read.table(' ../data/gf.txt',sep=',',header = TRUE,encoding='UTF-8',stringsAsFactors=FALSE)
d = read.table(' ../data/gf.txt')
d = read.table(' ../data/gf.txt')
d = read.table('../data/gf.txt')
d = read.table('../data/gf.txt')
d = read.table('../data/gf.txt')
setwd("E:/Code_Project/R_LAB")
d = read.table('./insulate.txt')
d
?read.table
d = read.table('./insulate.txt',header=TRUE)
d
m = lm(Strength~Lot*Cut , data=d)
m
summary(m)
paretoPlot(m)
library(pid)
install.packages("pid")
paretoPlot(m)
library(pid)
paretoPlot(m)
thedata<-data.frame(x=rnorm(20),f=rep(c("level1","level2"),10))
thedata$y<-rnorm(20,,3)+thedata$x*(as.numeric(thedata$f)-1)
library(effects)
model.lm <- lm(formula=y ~ x*f,data=thedata)
plot(effect(term="x:f",mod=model.lm,default.levels=20),multiline=TRUE)
install.packages('effects')
thedata<-data.frame(x=rnorm(20),f=rep(c("level1","level2"),10))
thedata$y<-rnorm(20,,3)+thedata$x*(as.numeric(thedata$f)-1)
#install.packages('effects')
library(effects)
model.lm <- lm(formula=y ~ x*f,data=thedata)
plot(effect(term="x:f",mod=model.lm,default.levels=20),multiline=TRUE)
plot(effect(term="Lot:Cut",mod=m,default.levels=20),multiline=TRUE)
plot(effect(term="Cut:Lot",mod=m,default.levels=20),multiline=TRUE)
plot(effect(term="Lot:Cut",mod=m,default.levels=20),multiline=TRUE)
plot(effect(term="Lot:Cut",mod=m,default.levels=20),multiline=TRUE)
m$residuals
hist(m$residuals)
plot(m)
plot(m)
d = read.table('./insulate.txt',header=TRUE)
m = lm(Strength~Lot*Cut , data=d)
summary(m)
plot(effect(term="Lot:Cut",mod=m,default.levels=20),multiline=TRUE)
plot(m)
hist(m$residuals)
irrigation<-factor(c(rep("Control",10),rep("Irrigated 10
mm",10),rep("Irrigated 20 mm",10)))
biomass<-1:30
plot(x,y)
irrigation
biomass<-1:30
plot(irrigation,biomass)
summary(aov(biomass~irrigation))
contrasts(irrigation)
irrigation
contrasts(irrigation)
d = read.table('./orth.txt')
d
d$V7 * d$V8
sum(d$V7 * d$V8)
sum(d$V10 * d$V8)
sum(d$V10 * d$V9)
d = read.table('./orth.txt')
d
d = read.table('./orth.txt',header=TRUE)
d
d2 = read.csv('./JetFactorial.csv')
d2
rbind(d,d)
d = rbind(d,d)
d2
d2 = read.csv('./JetFactorial.csv',header=FALSE)
d
d2
d2 = rbind(d2,d2)
d2
c(d2$V2,d2$V3)
d$y = c(d2$V2,d2$V3)
d = read.table('./orth.txt',header=TRUE)
d = rbind(d,d)
d2 = read.csv('./JetFactorial.csv',header=FALSE)
d2
d2 = rbind(d2,d2)
d$y = c(d2$V2,d2$V3)
d2
d
d2
d2 = read.csv('./JetFactorial.csv',header=FALSE)
d$y = c(d2$V2,d2$V3)
d
m = lm(y~. , data=d)
m
m = lm(y~.* , data=d)
m = lm(y~a*b*c*d , data=d)
summary(m)
fit <- aov(y~a*b*c*d , data=d)
summary(fit)
d = read.csv('./r2.txt')
d
d = read.csv('./r2.txt')
d
d2 = read.csv('./FractionalReact.csv',header=FALSE)
d2
d$y = d2$V2
d
drop(d$q)
d
drop(d$q)
m = lm(y~a*b*c*d , data=d)
summary(m)
fit <- aov(y~a*b*c*d , data=d)
summary(fit)
d = read.csv('./r2.txt')
d2 = read.csv('./FractionalReact.csv',header=FALSE)
d$y = d2$V2
head(d)
m = lm(y~a*b*c*d*e , data=d)
summary(m)
fit <- aov(y~a*b*c*d*e , data=d)
summary(fit)
?qqnorm
plot(m)
summary(m)
qqnorm(m)
resid(m)
qqnorm(resid(m))
qqline(resid(m))
m
m$coefficients
m$coefficients[:10]
m$coefficients[1:10]
m$coefficients[1:17]
m$coefficients[1:16]
qqnorm(m$coefficients[1:16])
qqqline(1)
qqline(1)
QQPLIT
?qqline
qqnorm(m$coefficients[1:16])
qqline(x=c(0,1),y=c(0,1))
d = read.table('./insulate.txt',header=TRUE)
d
d$Lot
class(d$Lot)
as.factor(d$Lot)
d$Lot = as.factor(d$Lot)
m = lm(Strength~Lot*Cut , data=d)
summary(m)
paretoPlot(m)
plot(effect(term="Lot:Cut",mod=m,default.levels=20),multiline=TRUE)
hist(m$residuals)
plot(m)
d = read.table('./insulate.txt',header=TRUE)
d$Lot = as.factor(d$Lot)
m = lm(Strength~Lot*Cut , data=d)
summary(m)
paretoPlot(m)
library(effects)
plot(effect(term="Lot:Cut",mod=m,default.levels=20),multiline=TRUE)
hist(m$residuals)
plot(m)
d = read.table('./orth.txt',header=TRUE)
d = rbind(d,d)
d2 = read.csv('./JetFactorial.csv',header=FALSE)
d$y = c(d2$V2,d2$V3)
m = lm(y~a*b*c*d , data=d)
summary(m)
fit <- aov(y~a*b*c*d , data=d)
summary(fit)
# 3
d = read.csv('./r2.txt')
d2 = read.csv('./FractionalReact.csv',header=FALSE)
d$y = d2$V2
m = lm(y~a*b*c*d*e , data=d)
summary(m)
fit <- aov(y~a*b*c*d*e , data=d)
summary(fit)
qqnorm(m$coefficients[1:16])
qqline(x=c(0,1),y=c(0,1))
N <- c(0,1,0,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,1,0,1,1,0,0)
P <- c(1,1,0,0,0,1,0,1,1,1,0,0,0,1,0,1,1,0,0,1,0,1,1,0)
K <- c(1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,0,0,0,1,1,1,0,1,0)
yield <- c(49.5,62.8,46.8,57.0,59.8,58.5,55.5,56.0,62.8,55.8,69.5,
55.0, 62.0,48.8,45.5,44.2,52.0,51.5,49.8,48.8,57.2,59.0,53.2,56.0)
npk <- data.frame(block = gl(6,4), N = factor(N), P = factor(P),
K = factor(K), yield = yield)
boxplot(yield~N*P,data =npk, col=4, xlab="N.P", ylab="Yield")
d = read.table('./orth.txt',header=TRUE)
d
4*5+5*180+9*6
16+180+81
